// The prime factors of 13195 are 5, 7, 13 and 29
// What is the largest prime factor of the number 600851475143??

// The following is what I've come up with so far. On a good note,
// it is printing 5, 7, 13 and 29. BUT then it continues to print non-prime
// numbers: 35, 65, 145, etc etc. Work continues.

function primeFactor(x) {
	for (count = 2; count < x; count++) {
		if (x%2 !== 0 && x%3 !== 0 && x%count === 0) {
			print(count)
		}
	}
}

primeFactor(13195);

//---------------------------------------------------------------------------
// Phase 2, to get an idea of how (maybe) the program should be filtering numbers:

function primeFactor(number) {
	if (number%2 !== 0 && number%3 !== 0 && number%5 !== 0)
		print(number)
	else 
		print("The number " + number + " factors all the way.")
}

primeFactor(4)
primeFactor(7)
//---------------------------------------------------------------------------

// Phase 3: I get the right answer with the following program:

function primeFactor(goal) {
	var multiply = 1
        for (count = 2; multiply < goal; count++) {
                if (goal%count === 0) {
                	print(count)
                	multiply *= count
                }
		}
}
primeFactor(600851475143);

// However, this program does not work perfectly with all numbers. For instance,
// if you run primeFactor(210), it should give the numbers 2, 3, 5 and 7. But
// it outputs 2, 3, 5, 6 and 7, even though the 6 is not a prime factor. 
// Also, primeFactor(100) outputs 2, 4, 5 and 10, will it would be nice to 
// show perhaps 2*2*5*5 instead.
// The program works selectively for my purposes, so: Solved but incomplete.
